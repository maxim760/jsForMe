import React, {useState, useEffect, useRef} from 'react';
import './App.css';

// let renderCount = 1
function App() {
  const [value, setValue] = useState("initial")
  const renderCount = useRef(1)
  const inputRef = useRef(null)
  const prevValue = useRef("")
  
  useEffect(() => {
    // renderCount++
    renderCount.current++
    console.log(inputRef.current.value)
    console.log(inputRef.current)

  })
  // cпособ через юх реф, без создания переменной 
  // сохранение предыдущего состояния 
  useEffect(() => {
    prevValue.current = value
  }, [value])
// cохраняется прошлое так как useRef не влияет на рендери пожтому 1) поменялось вэлью,2) все обновилось,3)вэлью присволиось юз рефу
//4)компонент не обновлися так как ю реф и поэтому выдает предудыщее значение"!!!
  const focus = () => inputRef.current.focus()
  // через реф связали элемент дом дерева и inputRef
  // если связали реы с дом деревом то само меняется, иначе самим через юх эффект
  return (
    <div >
      <h1>Количество рендеров: {renderCount.current}</h1>
      <h2>Прошлое состояние: {prevValue.current}</h2>
      <input ref={inputRef} onChange={e => setValue(e.target.value)} value={value} />
      <button className="btn btn-success" onClick={focus}>Фокус</button>
    </div>
  );
}

export default App;
// аналог стэйта не делающий перерендер

const imgRef = useRef()

const photoPickHandler = (uri) => {
  imgRef = uri 
}
// если бы было через юзстэйт то было бы перерендоривание всегда, а этого здесь не надо
потом это имгреф передаем куда надо
// в REF ОБЯЗАТЛЬЕНО ЧЕРЕЗ CURRENT
