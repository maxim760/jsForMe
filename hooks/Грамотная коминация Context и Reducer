4 файла
1) Контекст (создание контекста)
2) Редьюсер ( action type и кейсы что делать)
3) State (Всё взаимодействие и функционал)
4) Types (но он вынесен чуть выше, в принципе можно и здесь)
// базовая структура

types.js
TodoState.js
TodoReducer.js
TodoContext.js

************************************************************************
types.js
************************************************************************
export const ADD_TODO = "ADD_TODO"
export const REMOVE_TODO = "REMOVE_TODO"
export const EDIT_TODO = "EDIT_TODO"
************************************************************************
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

************************************************************************
TodoContext.js
************************************************************************
import React from 'react'

export const TodoContext = React.createContext()
************************************************************************
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||


************************************************************************
TodoReducer.js
************************************************************************
import {ADD_TODO,REMOVE_TODO,EDIT_TODO} from "../types"
export const TodoReducer = (state,action = {type : null}) => {
  switch(action.type) {
    case ADD_TODO:
      return {
        ...state,
        todos: [...state.todos, {id: Date.now().toString(), title: action.payload}]
      }
    case REMOVE_TODO:
      const index = state.todos.findIndex(todo => todo.id === action.payload)
      return {
        ...state,
        todos: [...state.todos.slice(0,index),...state.todos.slice(index+1)]
      }
    case EDIT_TODO:
      return {
        ...state,
        todos: state.todos.map(todo => {
          todo.title = todo.id === action.payload.id ?  action.payload.title : todo.title
          return todo
        })
      }
    default:
      return state
  }
}
************************************************************************
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||


************************************************************************
TodoState.js
************************************************************************
import React, {useReducer} from 'react'

import {ADD_TODO,REMOVE_TODO,EDIT_TODO} from "../types"
import {TodoContext} from "./TodoContext"
import {TodoReducer} from "./TodoReducer"

export const TodoState = ({children}) => {
  const initialState = {
    todos: [{id: "1", title: "Выучить React Native"}]
  }
  const [state, dispatch] = useReducer(TodoReducer, initialState)
  
  const addTodo = (title) => dispatch({
    type: ADD_TODO,
    payload: title
  })
  const removeTodo = (id) => dispatch({
    type: REMOVE_TODO,
    payload: id
  })
  const editTodo = (id,title) => dispatch({
    type: EDIT_TODO,
    payload: {title,id}
  })

  return (
    <TodoContext.Provider value={{
      todos: state.todos,
      addTodo,removeTodo,editTodo
    }}>
      {children}
    </TodoContext.Provider>
  )
}
************************************************************************
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||


// ИСПОЛЬЗОВАНИЕ
Обернули все приложение воркуг TodoState
import { TodoState } from './src/context/todo/todoState';

return (
  <TodoState>
    <MainLayout />
  </TodoState>
)

// Заюзали стэйт и диспатч
import {TodoContext} from "./context/todo/todoContext"

const {todos, addTodo,removeTodo,editTodo} = useContext(TodoContext)

Возвращаю его или можно сразу где надо получать и на страницу!
<MainScreen todos={todos} addTodo={addTodo} removeTodo={removeTodo}>

или типа того
import {TodoContext} from "./context/todo/todoContext"
const {addTodo} = useContext(TodoContext)
onPress={() => addTodo(id)}

