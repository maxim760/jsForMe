// COMPONENT resourse.js
// главная функция  - wrapPromise
// fetchPost fetchUsers - стандартные фетчи

export function useResource() {
  return {
    posts: wrapPromise(fetchPost()),
    users: wrapPromise(fetchUsers())
  }
}

function wrapPromise(promise) {
  let status = "pending"
  let result
  const suspender = promise
    .then((r) => {
      result = r
      status = "success"
    })
    .catch((e) => {
      result = e
      status = "error"
    })
  return {
    read() {
      if (status === "pending") {
        throw suspender
      } else if (status === "error") {
        console.log("error")
        throw result
      } else {
        console.log("true")
        return result
      }
    },
  }
}
const fetchPost = async () => {
  try {
    const res = await fetch(
      "https://jsonplaceholder.typicode.com/posts?_limit=50"
    )
    if (!res.ok) {
      throw new Error(`couldn't fetch data. Error: ${res.status}`)
    }
    return await res.json()
  } catch (err) {
    console.log(err, "rerererere")
  }
}

const fetchUsers = async () => {
  try {
    const res = await fetch(
      "https://jsonplaceholder.typicode.com/users?_limit=5"
    )
    if (!res.ok) {
      throw new Error(`couldn't fetch data. Error: ${res.status}`)
    }
    return await res.json()
  } catch (err) {
    console.log(err, "rerererere")
  }
}


// ===========================================================
// ИСПОЛЬЗОВАНИЕ
// App.js
import React, {Suspense} from 'react'
import { useResource } from "./resource"
import { Posts } from './posts'
import { Users } from './users';

function App() {
  const resource = useResource()
  return (
    <div className="container">
      <h1>Susopense</h1>
      <Suspense fallback={<p>Loading</p>}>
        <Users resource={resource} />
      </Suspense>
      <Suspense fallback={<p>Loading</p>}>
        <Posts resource={resource} t={t} />
      </Suspense>
      {/* можно обьединять две загрузки*/}
      <Suspense fallback={<p>Loading</p>}>
        <Users resource={resource} />
        <Posts resource={resource} />
      </Suspense>
    </div>
  );
}

export default App;

// =============================================================
КОМПОНЕНТЫ САМЫЕ ОБЫЧНЫЕ
import React from 'react'

export const Posts = ({ resource }) => {
  const posts = resource.posts.read()
  return (
    <div>
      <h3>Posts</h3>
      <ul>
        {posts.map(({title,id}) => <li key={id}>{title}</li>)}
      </ul>
    </div>
  )
}
