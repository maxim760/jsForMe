{
    interface Core {
        length: number;
    }

    const getArgument = function <T extends Core>(arg: T): T { // расширили дженерик и описали тип свойства
        console.log(arg.length);  // это число будет так как мы указали extneds core (распространяется только на то где есть length, для чисел работать не будет так как у чисел нет length)
        return arg;
    };

    // getArgument(3);  // Error, number doesn't have a .length property

    getArgument({length: 10, value: 3});
}
-----------------
{
    const getSomeData = function<T, K extends keyof T>(obj: T, key: K) : T[K] {
        return obj[key];
    }

    const properties = { a: 1, b: 2, c: 3, d: 4 };

    getSomeData(properties, "a"); // okay
    // getSomeData(properties, "m"); // error: Argument of type 'm' isn't assignable to 'a' | 'b' | 'c' | 'd'.
}

keyof, предоставляющее доступ ко всем именам свойств в структурном типе данных.

 Конструкция keyof – это гарант того, что вы пытаетесь передать в функцию только разрешённый объект и существующее имя свойства
 , при этом взамен вы получаете не только значение свойства, но и его тип.
 
 Pick<T, K extends keyof T> – выделяет из некоторого типа T некоторый набор свойств K
