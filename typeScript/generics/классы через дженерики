// но класс надо еще через консуткртор инициализировать
{
    class GenericNumber<T> {
        n: T;
        sum: (a: T, b: T) => T;
    }

    let myGenericNumber = new GenericNumber<number>();
    myGenericNumber.n = 0;
    myGenericNumber.sum = function(n1, n2) {
        return n1 + n2;
    };
}
----------------------------

{
    const create = function <T>(Entity: {new(): T; }): T { // запись дженерика через обьекта // лучше тсндартно писать new () => T
        return new Entity();
    }

    class Person {}

    create(Person);
    //create(() => 1);
}


------------------------------
{
    class BeeKeeper {
        hasMask: boolean;
    }

    class ZooKeeper {
        tag: string;
    }

    class Animal {
        numLegs: number;
    }

    class Bee extends Animal {
        keeper: BeeKeeper;
    }

    class Lion extends Animal {
        keeper: ZooKeeper;
    }

    const createInstance = function <A extends Animal>(c: new () => A): A { // передаваемый тип только то что расширяет энимал
        return new c();
    };

    createInstance(Lion).keeper.tag;  // typechecks!
    createInstance(Bee).keeper.hasMask;   // typechecks!
    createInstance(BeeKeeper).keeper.hasMask // err
}
