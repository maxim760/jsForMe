// используюя на энгуляре и в бэкенде next
// на реакте не используются особо
// нунжо еще флаг включить что-тоти типа экспериментал декоратор юсинг хз
// Decorator
{
    const sealed = function(target: Function) {
        // do something with 'target' ...
    }
}

// Decorator Factory
function color(value: string) { // this is the decorator factory
    return function (target: Function) { // this is the decorator
        // do something with 'target' and 'value'...
    }
}

 // использование 
// Class Decorators
{
    const sealed = function(constructor: Function) {
        Object.seal(constructor); // нельзя добалять в обьект новые свойсват
        Object.seal(constructor.prototype);
        console.log('Hello from Decorator');
    };

    @sealed
    class Greeter {
        greeting: string;

        constructor(message: string) {
            this.greeting = message;
            console.log(`Hello ${this.greeting} from Constructor`);
        }
    }

    new Greeter('User');
}  

-------

{
    const enumerable = function(value: boolean) {
        return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {
            descriptor.enumerable = value;
        };
    };

    class Greeter {
        greeting: string;
        constructor(message: string) {
            this.greeting = message;
        }

        @enumerable(true)
        greet() {
            return "Hello, " + this.greeting;
        }
    }

    for (const property in Greeter.prototype) {
        console.log(property);
    }
}




------------------------

'use strict';
{
    const configurable = function(value: boolean) {
        return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {
            descriptor.configurable = value;
        };
    };

    class Point {
        private _x: number;
        constructor(x: number) {
            this._x = x;
        }

        @configurable(false)
        readX() {
            return this._x;
        }
    }

    delete Point.prototype.readX
}

-----------------------------------

{
    const format = function () {
        return function (target: any, propertyKey: string): any {
            return {
                value: 'default'
            }
        }
    };

    class Greeter {
        @format()
        greeting: string;

        constructor(message: string) {
            console.log(this.greeting);
            // this.greeting = message;
        }
    }

    console.log(new Greeter('test'))
}

---------------------------

{
    const format = function () {
        return function (target: any, propertyKey: string): any {
            return {
                value: 'default',
                writable: true
            }
        }
    };

    class Greeter {
        @format()
        greeting: string;

        constructor(message: string) {
            console.log(this.greeting);
            this.greeting = message;
        }
    }

    console.log(new Greeter('test'))
}
-----------------------
function validate(target: any, propertyName: string, descriptor: TypedPropertyDescriptor<Function>) {
    let method = descriptor.value;
    descriptor.value = function () {
        const name = arguments[0];

        if (name.length < 1) {
            throw new Error('Length should be greater than 0');
        }

        return method.apply(this, arguments);
    }
}

class Greeter {
    greeting: string;

    constructor(message: string) {
        this.greeting = message;
    }

    @validate
    greet(name: string) {
        console.log("Hello " + name + ", " + this.greeting);
    }
}

new Greeter('Hello').greet('S');














