type f = (baseValue: number, increment: number) => number; // описываем //для защиты // можно также в отдельный файл вынести
 // используем (связь через <f>)
let increase
  = <f>function increase(x: number, y: number): number {
  return x + y;
};

const updatedValue: number = increase(3,1);

console.log(updatedValue);

// другой синтаксис
{
  const f = (a: number, b: number): number => a + b;

  type FType = (a: number, b: number) => number; // контракт

  const sum: FType = f; // здесь юзаю контракт
  let t: number = sum(4,6)
}
// разделили контракт и имплиментацию

// другой синтаксис
//ИТОГО
//1) // препочтительнее
{
  type FType = (a: number, b: number) => number; // контракт

  const sum: FType = function(a, b): number { // за счет ftype подразумевается number в а и b
    return a + b;
  }; // здесь юзаю контракт // просто создаю функцию тацп скрпитовую и определяю ей контракт FType
}
// разделили контракт и имплиментацию
//2)
type f = (baseValue: number, increment: number) => number;
let increase = <f>function increase(x: number, y: number): number {
  return x + y;
};
// ИЛИ
let increase = <f>(x: number, y: number): number => {
  return x + y;
};
// ПРЕИМУЩЕСТВА : имплиментауия и сигнатура в разных местах, есди в одном и сигнатруа сложно то трудно читабельно
