Оба могут быть использованы для описания формы объекта или сигнатуры функции. Но синтаксис отличается

interface Point {
  x: number;
  y: number;
}

interface SetPoint {
  (x: number, y: number): void;
}

// или если это метод в обьекте 
// reset(): void;
// если просто функция (): void 

type Point = {
  x: number;
  y: number;
};

type SetPoint = (x: number, y: number) => void;
---------------------------
В отличие от интерфейса, псевдоним типа может также использоваться для других типов, таких как примитивы, объединения и кортежи.

// primitive
type Name = string;

// object
type PartialPointX = { x: number; };
type PartialPointY = { y: number; };

// union
type PartialPoint = PartialPointX | PartialPointY;

// tuple
type Data = [number, string];
-----------------------------
Оба могут быть расширены, но, опять же, синтаксис отличается. 
Кроме того, обратите внимание, что интерфейс и псевдоним типа не являются взаимоисключающими.
Интерфейс может расширять псевдоним типа, и наоборот.

Интерфейс расширяет интерфейс

interface PartialPointX { x: number; }
interface Point extends PartialPointX { y: number; }
(-)(-)(-)(-)(-)(-)(-)(-)(-)(-)(-)(-)
Псевдоним типа расширяет псевдоним типа

type PartialPointX = { x: number; };
type Point = PartialPointX & { y: number; };
(-)(-)(-)(-)(-)(-)(-)(-)(-)(-)(-)(-)
Интерфейс расширяет псевдоним типа

type PartialPointX = { x: number; };
interface Point extends PartialPointX { y: number; }
(-)(-)(-)(-)(-)(-)(-)(-)(-)(-)(-)(-)
Псевдоним типа расширяет интерфейс

interface PartialPointX { x: number; }
type Point = PartialPointX & { y: number; };
--------------------------------

Класс может реализовывать интерфейс или псевдоним типа, оба одинаково точно.
Однако обратите внимание, что класс и интерфейс считаются статическими чертежами.
Поэтому они не могут реализовать/расширить псевдоним типа, который называет тип объединения.

interface Point {
  x: number;
  y: number;
}

class SomePoint implements Point {
  x: 1;
  y: 2;
}

type Point2 = {
  x: number;
  y: number;
};

class SomePoint2 implements Point2 {
  x: 1;
  y: 2;
}

type PartialPoint = { x: number; } | { y: number; };

// FIXME: can not implement a union type
class SomePartialPoint implements PartialPoint {
  x: 1;
  y: 2;
}

----------------------------
В отличие от псевдонима типа, 
интерфейс может быть определен несколько раз
и будет рассматриваться как единый интерфейс (с объединением элементов всех объявлений).

// These two declarations become:
// interface Point { x: number; y: number; }
interface Point { x: number; }
interface Point { y: number; }

const point: Point = { x: 1, y: 2 };
