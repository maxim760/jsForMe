// Enum
enum ColorList {Red = 1, Green = 2, Blue = 3} // можно каждому конкретно задавать 
// например для статус кода ошибок errorList = {errorNotFound = 404, errorServer = 500}
// потом по свитч кейсу допустим что т-о делать если число404 или число 500
let myColor: ColorList = ColorList.Green;
let сolorName: ColorList = ColorList[2];
// можно  и так и так обращаться +гибкость (удобно)
console.log(myColor);
console.log(сolorName);

// выглядит более правильно что ли, когда мы  кконкретной ошибке обращаемся через что-то конкретное типа errorList.errorNotFound
// например if (errorList.errorNotFound === currentError) {...} // возможно написано нерпавильно с точки зрения тайпскрипта именно строчка с ифом

/** Набор сгруппированных констант */
enum SelectableButtonTypes {
    Important = "important",
    Optional = "optional",
    Irrelevant = "irrelevant"
}
interface IButtonProps {
    text: string,
    /** Тип кнопки, извлеченный из перечисления SelectableButtonTypes */
    type: SelectableButtonTypes,
    action: (selected: boolean) => void
}
const ExtendedSelectableButton = ({text, type, action}: IButtonProps) => {
    let [selected, setSelected]  = useState(false)
    return (<button className={"extendedSelectableButton " + type + (selected? " selected" : "")} onClick={ _ => {
        setSelected(!selected)
        action(selected)
    }}>{text}</button>)
}
/** Экспорт компонента и перечисления */
export { ExtendedSelectableButton, SelectableButtonTypes}
