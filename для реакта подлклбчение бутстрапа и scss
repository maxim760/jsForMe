подключаем бутстрап в реакте
npm install reactstrap bootstrap@4 --save
 
подключаем сасс или с си эсэс в реакте
npm install node-sass --save

подлкючаем бутстрап
import "bootstrap/dist/css/bootstrap.css"

документация и примеры на сайте reactstrap

подключил стайлед компонент
npm install --save styled-components
import styled from "styled-components"

Пример использования  styled-components

const AppBlock = styled.div`
    margin: 0 auto;
    max-width: 800px;
`

const App = () => {

    return (
        <AppBlock>
            ... блоки ...
        </AppBlock>    
    )
}

(после точки назвпание тэна, в бэктиках - стили)
очистка кэша npm cache clean --force

Чтобы обратиться к PUBLIC  в реакте в коде !!!
<img className="errorimg" src={process.env.PUBLIC_URL + "/img/close (1).png"} alt="error" />
process.env.PUBLIC_URL + (дальше сам адрес начиная со слэша!!!)

// использование children
это в app.js которая создает детей 
       const charDetails = (
                <CharDetails charId={this.state.selectedChar} > 
                    <Field field="gender" label="Gender" />
                    <Field field="born" label="Born" />
                </CharDetails>

            )
      это в charDetails, у которых ребенок Field
      
      {this.props.children} - внутри return'a или если мы хотим их изманеить что то доабвить то так:
      
       {
          React.Children.map(this.props.children, (child) => {
               return React.cloneElement(child, {char}) // {char:char}
          })
       }
      в реакте нельяз напрямую менять элемент поэтому сощхздаем клона через React.cloneElement(child, ...) с добавлением обьекта через запятую, т.е. будет тот же самый чайлд +
      + нужный нам обьект
            
// роутинг
npm install --save react-router-dom
import {BrowserRouter as Router, Route} from 'react-router-dom'
роутинг и реакт фрагмент вместе не используюмся поэтому можно див!!
настрока самой маршрутизации(весь проект обернут в <Router>)

<Route path="/characters" component = {CharacterPage} />
<Route path="/books" component = {BooksPage} />
<Route path="/houses" component = {HousesPage} />
                    
                   path и component!!
использование ссылок
import {Link} from "react-router-dom"
сама ссылка
<HeaderBlock>
            <HeaderTitle>
                <Link to="/ ">
                Game of Thrones DB
                </Link>
            </HeaderTitle>
            <HeaderLinks>
                <li>
                    <Link to="/characters/">Characters</Link>
                </li>
                <li>
                    <Link to="/houses/">Houses</Link>
                </li>
                <li>
                <Link to="/books/">Books</Link>   
                </li>
            </HeaderLinks>
        </HeaderBlock>
        
   <Route path="/" exact component = {() => <h1>Welcome to GOT DB</h1>} />
// exact чтобы компонент подгружался только именно по этой ссылке(начальаная страница в этом примере, иначе он будет всегда грузиться)
// для динамичных ссылко и тд
Route path="/books/:id" render={
    ({match,location,history}) => {
    return <BooksItem />}
} />
// в матч информация о ссылке и об айди(она в параметрах)
//в хистори разные фугкции
// в локатион юрл
history
this.props.history.push(`/books/${itemId}`) // переход по этой ссылке

обьявление дефолтных пропсов
 static defaultProps = {
        interval: 15000
 } // пишем внури класса созданного, который используем
 или так уже после класса 
 RandomChar.defaultProps = {
    interval: 15000
}

Динамическая типизация проврека типа 
RandomChar.propTypes = {
    interval: PropTypes.number
    getDate: PropTypes.arrayOf(PropTypes.object)
}
или через статик задать внутри класса
import PropTypes from "prop-types"
npm install prop-types - вроде так
