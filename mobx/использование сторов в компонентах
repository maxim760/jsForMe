import React from "react"

import { observer, inject } from "mobx-react"

import Table from "@material-ui/core/Table"
import TableBody from "@material-ui/core/TableBody"
import TableCell from "@material-ui/core/TableCell"
import TableContainer from "@material-ui/core/TableContainer"
import TableHead from "@material-ui/core/TableHead"
import TableRow from "@material-ui/core/TableRow"
import Paper from "@material-ui/core/Paper"
import { TCoin, TClasses, TCoinDiff, TColor, TSelectedCoin } from "../types"
import CurrenciesStore from "../stores/currenciesStore"
import ConverterStore from "../stores/converterStore"

interface ITable {
  classes: TClasses
  currenciesStore?: CurrenciesStore
  converterStore?: ConverterStore
}

const CryptoTable = inject(
  "currenciesStore",
  "converterStore"
)(
  observer(({ classes, currenciesStore, converterStore }: ITable) => {
    const items: TCoin[] = currenciesStore!.getItems
    const diffObj = currenciesStore!.getDiffObj

    const callUpdate = () =>
      setInterval(() => {
        currenciesStore!.fetchItems()
      }, 30000)

    React.useEffect(() => {
      currenciesStore!.fetchItems()
      callUpdate()
    }, [])

    const onClickRow = (coin: TSelectedCoin) => {
      console.log(coin)
      converterStore!.setSelectedCoin(coin)
    }

    return (
      <TableContainer component={Paper}>
        <Table stickyHeader className={classes.table} aria-label="simple table">
          <TableHead>
            <TableRow>
              <TableCell></TableCell>
              <TableCell align="left">FullName</TableCell>
              <TableCell align="left">Name</TableCell>
              <TableCell align="left">Price</TableCell>
              <TableCell align="left">Volume24hour</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {!items || items?.length === 0 ? (
              <TableRow>
                <TableCell align="left">Загрузка...</TableCell>
              </TableRow>
            ) : (
              items.map(
                ({
                  id,
                  imageUrl,
                  price,
                  name,
                  fullName,
                  volume24hour,
                }: TCoin) => {
                  return (
                    <TableRow
                      onClick={onClickRow.bind(null,{[name]:{name,price}})}
                      className={classes.rowCurrency}
                      hover
                      key={id}
                    >
                      <TableCell component="th" scope="row">
                        <img
                          className={classes.coin}
                          alt="crypto coin icon"
                          src={`https://cryptocompare.com${imageUrl}`}
                        />
                      </TableCell>
                      <TableCell align="left">{fullName}</TableCell>
                      <TableCell align="left">{name}</TableCell>
                      <TableCell
                        className={diffObj[name] ? classes[diffObj[name]] : ""}
                        align="left"
                      >
                        $&nbsp;{price.toLocaleString()}
                      </TableCell>
                      <TableCell align="left">
                        $&nbsp;{volume24hour.toLocaleString()}
                      </TableCell>
                    </TableRow>
                  )
                }
              )
            )}
          </TableBody>
        </Table>
      </TableContainer>
    )
  })
)

export default CryptoTable
