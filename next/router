 =============   =============   ============= 
// useRouter \\ // useRouter \\ // useRouter \\
===============================================
//папка post
//[id].jsx
import Head from 'next/head'

import { useRouter } from "next/router"
// import Router from "next/router" // оба варианта особо нием не отличаются,
// Router более тяжелый но не держит в себе каких-то важный методов, есть например isSsr или что-то такое, в общем к нему применимо всё то , что применимо и к useRouter'у
// небольшое отличие в том что методы у роутера доступны так Router.method() а свойства так Router.router.query Router.router.prop
export default function Post() {
  const router = useRouter()
  return (
    <div>
      <h1>post next</h1>
    </div>
  )
}
// методы и свойства юзРоутера
asPath // снчала вовразает такое: post/[id] и асинхронно почти сразу изменфякется на post/20 и любое другое указанное в урл значение
back() // возвращает назад на прошлую страницу
components // информация о компонентах
push("/about") // переход на страницу /about
replace("/about") // переход на страницу /about ,но без добавления в history стэк
pathname // вернет грубо говоря названия файла в которое написали // типа post/[id] и так будет// и по этому названию можно образаться к компоненту
query // возвращает обьект с ключом id , т.к. файл [id].jsx - и значение - именно то id, по которому перешли , типа post/333 => {id:333} и тд
prefetch() // Предварительная загрузка страниц для более быстрого перехода на стороне клиента. Этот метод полезен только для навигации без него next/link
reload() Обновите текущий URL. Эквивалентно нажатию кнопки обновления браузера. Он исполняется window.location.reload()
events // события next'a
