//get\\
  const fetchTodos = async () => {
    showLoader()
    clearError()
    try {
      let todos = [] // обязателньо надо чтобы это был массив содержащий обьекты
      const res = await fetch("https://react-native-todoapp-89196.firebaseio.com/todos.json", {
        method: "GET",
        headers: {"Content-Type": "application/json"}
      })
      if(!res.ok) {
        throw new Error("could not fetch data. Error:" + res.status)
      }
      const data = await res.json() // ответ может быть нулл если пользователь удали все свои туду, поэтомму следущий блок в тра кэтч, если реально пусто,то 
      // то todos отсанется [], что устраивет нас
      try {
        todos = Object.keys(data).map(key => {
          return {id:key,...data[key]}
        })
      } catch(e) {}
      dispatch({type: FETCH_TODOS,payload: todos})
    } catch(e) {
      showError("Что-то пошло не так...\nПопробуйте снова.")
    } finally {
      hideLoader()      
    }
  }


//post\\
const addTodo = async (title) => {
    const res = await fetch("https://react-native-todoapp-89196.firebaseio.com/todos.json", {
      method: "POST",
      headers: {"Content-Type": "application/json"},
      body: JSON.stringify({title})
    })

    if(!res.ok) {
      throw new Error("could not fetch data. Error:" + res.status)
    }

    const {name : idName} = await res.json()
    // то что ай ди нэйм - мы заносим в ай ди и это являестя в котором хранится иинофрмация
    dispatch({type: ADD_TODO,payload: {id:idName,title}})
  }
  
//PATCH\\
const editTodo = async (id,title) => {
    showLoader()
    clearError()
    try {
      await fetch(`https://react-native-todoapp-89196.firebaseio.com/todos/${id}.json`,{
        method: "PATCH", // ЧАСТЬ ОБЬЕКТА // ЕСЛИ ВЕСЬ ОБЬЕКТ ТО НАДО PUT
        headers: {"Content-Type": "application/json"},
        body: JSON.stringify({title}) // изменили только тайтл
      })
      dispatch({type: EDIT_TODO,payload: {title,id}})
    } catch(e) {
      showError("Что-то пошло не так...\nПопробуйте снова.")
    } finally {
      hideLoader()
    }
    
  }
---
функция которая вызывает это, теперь асин авэйт, чтобы было корректно
 const editTodoHandler = async (title) => {
    await editTodo(todo.id,title)
    setIsModal(false)
  }
  
  
 // delete
 // можно без try catch
 const removeTodo = (id) => {
      ...
        onPress: async () => {
          try {
            await fetch(`https://react-native-todoapp-89196.firebaseio.com/todos/${id}.json`, { // body не передаем т к просто удаляем из текущего урл элемент
              method: "DELETE",
              headers: {"Content-Type": "application/json"}
            })
            changeScreen(null)
            dispatch({
              type: REMOVE_TODO,
              payload: id
            })
          } catch(e) {
            showError("Что-то пошло не так...\nПопробуйте снова.")
          }
  }

