import { CardElement, useStripe, useElements,ElementsConsumer } from "@stripe/react-stripe-js"
import axios from "axios"
import React from 'react'
import Link from "next/link"
import Button from 'reactstrap-button-loader';


const checkoutFormOptions = {
  
  style: {
    base: {
      fontSize: "16px",
      color: "#424770",
      "::placeholder": {
        color: "#aab7c4",
      },
    },
    invalid: {
      color: "#9e2146",
    },
  },
  hidePostalCode: true, // код города
}

const CheckoutForm = ({ success = () => { }, amount = 100 }) => {
  
  const stripe = useStripe()
  const elements = useElements()

  const [isValid, setIsValid] = React.useState(false)
  const [loading, setLoading] = React.useState(false)

  const checkValidHandler = (e) => {
    setIsValid(e.complete)
  }

  const handleSubmit = async (event) => {
    setLoading(true);
    event.preventDefault()

    const { error, paymentMethod } = await stripe.createPaymentMethod({
      type: "card",
      card: elements.getElement(CardElement),
    })

    if (!error) {
      const { id } = paymentMethod
      try {
        // в дате будет статус
        const { data } = await axios.post(`/api/payment`, {
          id,
          amount,
        })
        console.log(data)
        
        alert(data.status)
        console.log(success)
        success()
      } catch ({ message, response }) { // респонс будет только в том случае, если сервраная ошибка
        console.log(response ? response.data : message)
      } finally {
        setLoading(false)
      }
    } else {
      setLoading(true)
    }
  }
  return (
    <form onSubmit={handleSubmit} className="checkout-form">
      <CardElement options={checkoutFormOptions} onChange={checkValidHandler} />
      <Button loading={loading} disabled={!isValid} className="square_btn" type="submit">{!loading && `Pay ${(amount/100).toFixed(2)}$`}</Button>
      <p>4242 4242 4242 4242</p>
      <p>1014</p>
      <p>333</p>
      <Link href="/api/payment"><a>to api</a></Link>
      <style global jsx>{`
        p {
          padding:0;
          margin:0;
        }
        button {
          margin: 10px
        }
        .square_btn {
          width: 100%;
          max-width: 150px;
          display: inline-block;
          padding: 0.5em 1em;
          text-decoration: none;
          background: #668ad8; /*Button Color*/
          color: #fff;
          border-bottom: solid 4px #627295;
          border-radius: 3px;
          cursor:pointer;
          margin: 20px auto;
          outline:0;
        }
        .square_btn:disabled {
          opacity:0.5;
          cursor: no-drop;
        }
        .square_btn:active {
          /*on Click*/
          -ms-transform: translateY(4px);
          -webkit-transform: translateY(4px);
          transform: translateY(4px); /*Move down*/
          border-bottom: none; /*disappears*/
        }
        .checkout-form {
          width: 100%;
          max-width: 400px;
          margin: 0 auto;
          display: flex;
          flex-direction: column;
          justify-content: center;
        }
      `}</style>
    </form>
  )
}

export default CheckoutForm
