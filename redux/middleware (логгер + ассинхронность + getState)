пример миддл вэера , подходит для ассинхронности в редусере
import {createStore, applyMiddleware, compose} from "redux"
import thunk from 'redux-thunk'; // или reduxThunk
import logger from "redux-logger"
импортируем стор
// можно передать и свои миддлвэеры:
// function loggerMiddleware(store) {
//    return function(next) {
//        return function(action) {
//            const result = next(action)
//            console.log("Middleware", store.getState())
//            return result
//        }
//    }
//} // получаем весь стэйт приложения

// через es6
const loggerMiddleware = store => next => action => {
    const result = next(action)
    console.log("Middleware", store.getState())
    return result
} // получаем весь стэйт приложения


const store = createStore(
    rootReducer,
    compose (
        applyMiddleware(thunk, logger,loggerMiddleware),  // loggerMiddleware сами создали // по идее логгер должен быть 1 либо свой сделанный либо из redux-logger 
        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()
    )
)
// для поддержки асинхронн мидл ваер, то что дальше - для дев тулс(не нужно особо)

// action.js
export function async_increment() {
    return function(dispatch) {
        dispatch(disable_btn())
        setTimeout(() => {
            dispatch(increment())
            dispatch(enable_btn())
        }, 1500)
    }
}
// в диспатчах функции из action.js
// благодря тхунку здесь внутри можно передать диспатч который выпонлятся после сет таймаута // асинхронность
// логгер выводит в консоль изменения в редусере


// для thunk

import {createStore, compose, applyMiddleware} from "redux"
import {Provider} from "react-redux"
import rootReducer from "./store/reducers/rootReducer"
import thunk from 'redux-thunk';


const composeEnhancers =
  typeof window === 'object' &&
  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?   
    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({
    }) : compose;

const store = createStore(
  rootReducer,
  composeEnhancers(
    applyMiddleware(thunk)
  )
);
// благодаяр middelware thunk в action кроме диспатч можно также передвать метод getState, что иметь всю информацию о текущем стэйте и это помогает
export function quizAnswerClick(answerId) {
    return (dispatch, getState) => {
            const state = getState().quiz
            ...
    }
}    

// свой миддлвэйр для фильтра текстовго ввода // композицировали логику
import { ADD_POST, SHOW_ALERT } from "./types"
const banWords = ["fuck", "php", "shit", "slut", "spam", "retard"]

export const forbiddenWordsMiddleware = ({ dispatch }) => (next) => action => {
  if (action.type === ADD_POST) {
    const found = banWords.filter(word => action.payload.title.toLowerCase().includes(word))
    if (found.length > 0) {
      return dispatch({
        type: SHOW_ALERT,
        payload: {
          color: "danger",
          text: "Вы спамер. Мы вас не звали. Идите гуляйте"
        }
      })
    }
  } 
  return next(action)
}
// вся функция это дейсвие по стандарту в редаксе, за счет ифа по середние мы корректируем стандартное поведение

// подключаем 
import { createStore, compose, applyMiddleware} from "redux"
import { forbiddenWordsMiddleware } from "./redux/middleware"
import thunk from "redux-thunk"

const store = createStore(
  rootReducer, compose(
    applyMiddleware(
      thunk, forbiddenWordsMiddleware
    ),
    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),
  )
)
