если какие то данные ерез фетч получаем то их надо на гланойс транице оплучать в апп джс, так как это главный файлл

// функции оборачивать в юз колбэк чтобы повторно не вызывались
и в самом ретурне в он клике и прочем не должно быть анонимных функции!!! НЕ ДОЛЖНО, так как они повторно создаются а не хранятс ссылку, и минус оптимизация

МНЕ: больше пытаться не испольщовать on click ()=> clickHandler(index)
юзать всегда так on click clickHandler.bind(null,index)

// можно такжже весь компонетн оборачивать в реакт мемо

// когда реакт каждый рах переренаривается то все ссылк и внутри компнентов ипрочее тоже обновляется меняется, и нужно с этимбороться, если
это касается компонеов которые должны быть незименяемы, например вот это массив всегда посттянен, выносим его наверх, чтобы ссылка на него всегда была одинакова

const categories = ["Мясные", "Вегетианская", "Гриль", "Острые", "Закрытые"]

export const Home: React.FC = (): React.ReactElement => {
  const dispatch = useDispatch()
  const onSelectCategory : (index: number | null) => void = React.useCallback( (index) => {
    dispatch(setCategory(index))
  }, [dispatch] )

  const pizzas = useSelector<RootState, dataArrayType>((state) => state.pizzas.items)
  return (
    <div className="container">
      <div className="content__top">
        <Categories
          items={categories}
          onClickItem={index => dispatch(setCategory(index))}
        />
// Диспатчи лучше всегда обрачивать в юз колбэк или юз эффект если при создании, чтобы не делать лишних ренедров элементо и запросов к хранилищу


// обернули в реакт мемо весь компонет категорис, чтобы он не перерендоривался при отсутствии изменений
Отсутсвие изменений когда изменений нет гарпнтируем за счет того, что добавили в хом юз калбэк, массив с категорисами вынесли вверх как константу
export const Categories: React.FC<propTypes> = React.memo(({ items, onClickItem } : propTypes) => {
  const [active, setActive] = React.useState<number | null>(null)

  const onSelectItem: (id: number | null) => void = (id) => {
    setActive(id)
    onClickItem(id)
  }
  
  return (
    <div className="categories">
      <ul>
        <li className={active == null ? "active" : "null"} onClick={() => onSelectItem(null)}>Все</li>
        {
          items?.map((item,index) => {
            return (
              <li key={item} className={active === index ? "active" : ""} onClick={() => onSelectItem(index)}>
                {item}
              </li>
            )
          })
        }
      </ul>
    </div>
  )
})












