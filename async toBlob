async function getImage(canvas: any) {
  return new Promise((resolve, reject) => {
    if (!canvas) {
      return resolve(null);
    }

    canvas.toBlob(async (blob: Blob) => {
      const { url } = await uploadImage(blob);
      resolve(url);
    });
  });
}
// испольщование ниже
( finalAvatarFile.current) &&
        await getImage(finalAvatarFile.current).then((url) => {
            if (url) {
              objEdit["avatar"] = url;
            }
          });


// функций uploadImage

import { axios } from "../core/axios";

interface UploadeImage {
  size: number;
  width: number;
  height: number;
  url: string;
}

export const uploadImage: (image:any) => Promise<UploadeImage> = async (image: any) => {
  const formData = new FormData();
  formData.append("image", image);

  const { data } = await axios.post("/upload", formData, {
    headers: {
      "Content-type": "multipart/form-data",
    },
  });

  return data;
};



