import React, {useState} from 'react';
import classes from "./auth.module.css"
import Button from "../../components/ui/button/button"
import Input from "../../components/ui/input/input"
import axios from "axios"
import {connect} from "react-redux"
import {auth} from "../../store/actions/auth"




const Auth = (props) => {
    const [formControls, setFormControls] = useState({
        email: {
            value: "",
            type: "email",
            label: "Email",
            errorMessage: "Введите корректный email",
            valid: false,
            touched: false,
            validation: {
                required: true,
                email: true
            }
        },
        password: {
            value: "",
            type: "password",
            label: "Пароль",
            errorMessage: "Введите корректный пароль",
            valid: false,
            touched: false,
            validation: {
                required: true,
                minLength: 6
            }
        }
    })
    const [isValid, setIsValid] = useState(false)



    const loginHandler = () => {
        props.auth(formControls.email.value,formControls.password.value,true)
    }
    const registerHandler = () => {
        props.auth(formControls.email.value,formControls.password.value,false)
    }
    const submitHandler = async (event) => {
        event.preventDefault()
    }
    function validateControl(value,validation) {
        if(!validation) {
            return true
        }
        let isValid = true

        if(validation.required) {
            isValid = value.trim() !== "" && isValid
        }
        if(validation.email) {
            isValid = /^[\w-\.!#$%&'*+/=?^<>'{|}~]+@[\w-\.!#<>$%&'*+/=?^'{|}~]+\.[a-zA-Z\.]+$/.test(value) && isValid
        }
        if(validation.minLength) {
            isValid = value.trim().length >= validation.minLength && isValid
        }

        return isValid
    }

    function onChangeHandler(event, controlName) {
        const formControlsCopy = {...formControls}
        const control = { ...formControlsCopy[controlName]}

        control.value = event.target.value
        control.touched = true
        control.valid = validateControl(control.value, control.validation)
        formControlsCopy[controlName] = control

        let isFormValid = true
        Object.keys(formControlsCopy).forEach((item) => {
            isFormValid = formControlsCopy[item].valid && isFormValid
        })
        setFormControls(prev => {
            return {
                ...prev,
                ...formControlsCopy
            }
        })
        setIsValid(isFormValid)
    }

    const renderInputs = () => {
        let inputs = null;
        return inputs = Object.keys(formControls).map((controlName, index ) => {
            const control = formControls[controlName];
            console.log(control.value)
            return <Input
                key={controlName + index}
                type={control.type}
                value={control.value}
                valid={control.valid}
                touched={control.touched}
                label={control.label}
                shouldValidate={!!control.validation}
                errorMessage={control.errorMessage}
                onChange = {(event) => {
                    onChangeHandler(event, controlName)
            }}
            />
        })
    }

    return (
        <div className={classes.auth}>
            <div>
                <h1>Авторизация</h1>
                
                <form className={classes.authForm} onSubmit={submitHandler}>
                    { renderInputs() }
                    <Button disabled={isValid ? null : "disabled"} type="success" onClick={loginHandler}>Войти</Button>
                    <Button disabled={isValid ? null : "disabled"} type="primary" onClick={registerHandler}>Зарегистрироваться</Button>
                </form>
            </div>
        </div>
    )
}


const mapDispatchToProps = {
    auth,
}

export default connect(null,mapDispatchToProps)(Auth)
