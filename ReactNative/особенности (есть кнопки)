изначально для всего display flex , есть также none, других нет
изначально flexDirection: "column"
измерения только в пикселях ,и единицу изммерения не нужно указывать
fontSize: 30
для linear-gradient нужно библиотеку импортировать

transparent <=> "rgba(0,0,0,0)"

<Button title="Добавить" /> - так текст в кнопке пишется
К Button нельзя применить style, настроить кнопку только через атрибуты(там есть color еще )
чтобы применить стили: надо создать TouchableOpacity , его настроить и  кнему стили
ИЛИ кнопку обернуть во View
Border-radius из View:
width: "40%",
borderRadius: 25,
overflow: "hidden",
// без overflow - не сработает

//
ОБЕРТКА ДЛЯ КНОПКИ
---------------
import React from 'react'
import {View, StyleSheet, TouchableOpacity} from "react-native"
import { AppTextBold } from './AppTextBold'
import { THEME } from '../../theme'

export const AppButton = ({children,onPress, color = THEME.MAIN_COLOR}) => {
  return (
    <TouchableOpacity onPress={onPress}>
      <View style={{...styles.button, backgroundColor:color }}>
        <AppTextBold>{children}</AppTextBold>
      </View>
    </TouchableOpacity>
  )
}

const styles = StyleSheet.create({
  button: {
    paddingHorizontal: 20,
    paddingVertical: 10,
    borderRadius: 5,
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center"
  }
})
-----------------
--------
<TextInput /> - для инпута

onPress - вместо onClick
onLongPress - длинное нажатие
reactNative - требует уникальный ключ key в качестве строки

// IMAGE
<Image
  style={styles.tinyLogo}
  source={require('@expo/snack-static/react-native-logo.png')} // внутри require - путь
/> // ЛОКАЛЬНАЯ // предпочтительнее
<Image
  style={styles.tinyLogo}
  source={{
    uri: 'https://reactnative.dev/img/tiny_logo.png',
  }}
/>  // ИЗ ИНЕТА
// для адаптации resizeMode

работа с инпутом
===============================================================
import React, {useState} from 'react';
import {View,TextInput,Button, StyleSheet} from "react-native"
export const AddTodo = ({onSumbit}) => {
  const [value, setValue] = useState("")
  const pressHandler = () => {
    if(value.trim()) {
      onSumbit(value)
    }
    setValue("")
  }
  const changeHandler = (text) => {
    setValue(text)
    // если через onChange - то текст получсем через event.nativeEvent.text (если как параметр передан event)
  }
  return (
    <View style={styles.block}>
      <TextInput value={value} onChangeText={ text => changeHandler(text)} style={styles.input} />
      <Button style={styles.button} title="Добавить" onPress={pressHandler} />
    </View>
  )
}
const styles = StyleSheet.create({
  block: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: 15
  },
  input: {
    width: "70%",
    padding: 10,
    borderBottomWidth: 2,
    borderStyle: "solid",
    borderBottomColor: "#3949ab"

  },
  button: {
  }
})
=========================================================================
