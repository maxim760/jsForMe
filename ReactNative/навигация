// желателньно соблюдать стилизацию под айос и андроид
export const AppNavigation = () => {
  return (
    <NavigationContainer>
      <Stack.Navigator initialRouteName="Main" screenOptions={{
        headerTintColor: Platform.OS === "android" ? "#fff" : THEME.MAIN_COLOR, // цвет заголовка через это свойство
        headerStyle: styles.headerStyle, // bg color
        headerShown: false, // чтобы не показывать заголовок, я не использовал
      }} headerMode="float"> // есть еще screen но float покрасивее
        <Stack.Screen  name="Main" component={MainScreen} options={{title: "Мой блог" ,headerTintColor: "yellow"}} /> // св-ва здесь главнее тех что в стэк навигаторе, которые в 
                                                                                                                      // стэк скрине перезаписывает те что стэк навигаторе
        <Stack.Screen name="Post" component={PostScreen} options={{title: "Пост №42"}} />
      </Stack.Navigator>
    </NavigationContainer>
  )
}
// НАСТРОЙКА ПАРАМЕТРОВ СКРИНА ИЗ САМОГО СКРИНА (ДЛЯ ДИНМАИКИ МОЖНО НУ И ПРОСТО)
================================================================
import React, {useLayoutEffect} from 'react'
import {View, StyleSheet,Button} from "react-native"
import { AppText } from '../components/ui/AppText'
import { AppBoldText } from '../components/ui/AppBoldText'

export const PostScreen = ({navigation,route}) => {
  useLayoutEffect(() => { // аналог useEffect, в документации он
    navigation.setOptions({  //!!!!!! setOptions!!!! // ВСЁ ТО ЖЕ САМОЕ ЧТО ЕСТЬ В SCREEN_OPTIONS ЕСТЬ И ЗДЕСЬ
      title:"434",
    })
  }, [])
================================================================

// headerStyle: {
    backgroundColor: Platform.OS === "android" ? THEME.MAIN_COLOR : "#fff",
  }

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
<Stack.Navigator /> - ДРУГИЕ ПАРАМЕТРЫ()
SCREENOPTIONS - СНАЧАЛА ПРО НИХ:
  headerTintColor: 'white', // цвет заголовка через это свойство
  headerStyle: styles.headerStyle, // bg color и др.стили нарример height
  headerShown: false, // чтобы не показывать заголовок, я не использовал
  headerTitleAlign: center/left
  title: ...text... (или headerTitle)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++  
                                    
///////////////////////////////////////////////////////////////////////////////////////


//NAVIGATION
// переход по страничкам навигации
// NAVIGATE
export const MainScreen = ({navigation}) => {
  const goToPost = () => {
    navigation.navigate("Post" ) // переход на страничку с name=Post // если место navigate будет push => то же самое, но при переходе на эту же страницу (с которой был клик)
                                  // navigate ничего не сделает, а push перейедт на нее как новую с анимацией, и также будет кнопка назад которая будет вовразаться на нее же
                                  // по сути одно и тоже, но такая деталь
  } или
  navigation.navigate("Post", {postId: post.id} ) // передаем пост ай ди, и по нему на страничке пост определим что за пост и относительно этого сформируем данные на страницу
  // получаем этот ай ди 
  //export const PostScreen = ({navigation,route}) => {
  //  const postId = route.params["postId"]
  // DATA - массив типа базы данных который содержит нужную инфу , и в замисти от него и от ай ди мы можем найти любой айтем
 // const post = DATA.find(elem => elem.id === postId)

  
  return (
    <View style={styles.wrapper}>
      <AppTextBold style={styles.text}>MainScreen</AppTextBold>
      <AppText style={styles.text}>MainScreen regular</AppText>
      <Button title="go to post" onPress={goToPost} />
    </View>
  )
}

//goBack
export const PostScreen = ({navigation}) => {
  const toBack = () => {
    navigation.goBack() // переход на предыдущую страницу (обратно по стэку)
  }
  return (
    <View style={styles.wrapper}>
      <AppText>PostScreen</AppText>
      <Button title="Обратно" onPress={toBack} />
    </View>
  )
}
