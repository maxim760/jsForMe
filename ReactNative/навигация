//сверху все библиотеки // 1) по документации устанавливаем что на get started и 2 странице
2)npm install react-navigation-header-buttons И npm install @expo/vector-icons 
И npm install @react-navigation/bottom-tabs И npm install @react-navigation/material-bottom-tabs react-native-paper // стиль под андроид
3) npm install @react-navigation/drawer // дровер навигация

ИЕРАРХИЯ
скрин < стэк < таб < дровер
типа в 1 компоненте дровера содежрится компонент имеющий два таба на кждом из двух табов стэк с двумя страницами(скринами)
понятно что шаги могут пропускаться и дровер содержать просто страницу
//это примерно
// в принципе стэк может содержать в себе страницу имеющую табы но в любом случае эти табы будут содерать стэки или скрины

// SCREEN OPTIONS - принимает все то что характерно для нижних options // для stack и tab отличается
ДЕФОЛТНЫЕ НАСТРОЙКИ SCREEN OPTIONS
const navigatorOptions = () => {
  return {
    headerTintColor: Platform.OS === "android" ? "#fff" : THEME.MAIN_COLOR,
    headerStyle: styles.headerStyle,  
  }
} 
ИСПОЛЬЗОВАНИЕ .... screenOptions={navigatorOptions}
// желателньно соблюдать стилизацию под айос и андроид
// СТЭК НАВИГАТОР
export const AppNavigation = () => {
  return (
    <NavigationContainer>
      <Stack.Navigator initialRouteName="Main" screenOptions={{
        headerTintColor: Platform.OS === "android" ? "#fff" : THEME.MAIN_COLOR, // цвет заголовка через это свойство
        headerStyle: styles.headerStyle, // bg color
        headerShown: false, // чтобы не показывать заголовок, я не использовал
      }} headerMode="float"> // есть еще screen но float покрасивее
        <Stack.Screen  name="Main" component={MainScreen} options={{title: "Мой блог" ,headerTintColor: "yellow"}} /> // св-ва здесь главнее тех что в стэк навигаторе, которые в 
                                                                                                                      // стэк скрине перезаписывает те что стэк навигаторе
        <Stack.Screen name="Post" component={PostScreen} options={{title: "Пост №42"}} />
      </Stack.Navigator>
    </NavigationContainer>
  )
}
// НАСТРОЙКА ПАРАМЕТРОВ СКРИНА ИЗ САМОГО СКРИНА (ДЛЯ ДИНМАИКИ МОЖНО НУ И ПРОСТО)
================================================================
import React, {useLayoutEffect} from 'react'
import {View, StyleSheet,Button} from "react-native"
import { AppText } from '../components/ui/AppText'
import { AppBoldText } from '../components/ui/AppBoldText'

export const PostScreen = ({navigation,route}) => {
  useLayoutEffect(() => { // аналог useEffect, в документации он
    navigation.setOptions({  //!!!!!! setOptions!!!! // ВСЁ ТО ЖЕ САМОЕ ЧТО ЕСТЬ В SCREEN_OPTIONS ЕСТЬ И ЗДЕСЬ
      title:"434",
    })
  }, [СЮДА ПАРАМЕТРЫ ОТ КОТОРЫХ ЗАВИСИТ ВОЗМОЖНОЕ ИЗМЕНЕНИЕ НАСТРОЕК НАПРИМЕР booked (типа отмечен или не отмечен пост)])
================================================================

// headerStyle: {
    backgroundColor: Platform.OS === "android" ? THEME.MAIN_COLOR : "#fff",
  }

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
<Stack.Navigator /> - ДРУГИЕ ПАРАМЕТРЫ()
SCREENOPTIONS - СНАЧАЛА ПРО НИХ:
  headerTintColor: 'white', // цвет заголовка через это свойство
  headerStyle: styles.headerStyle, // bg color и др.стили нарример height
  headerShown: false, // чтобы не показывать заголовок, я не использовал
  headerTitleAlign: center/left
  headerTitleStyle: стили тайтла
  title: ...text... (или headerTitle)
  headerRight: () => <AntDesign size={20} color={"red"} name="camera" onPress={somethingFunc} /> // справа в заголовке
  headerLeft: () => <AppText>fd</AppText> // слева в заголовке
  // для хэдера ЛУЧШЕ ИСПОЛЬЗОВАТЬ БИБЛИОТЕКИ npm install react-navigation-header-buttons ||| npm install @expo/vector-icons
  // 1 ДЛЯ ИКОНОК, ДРУГАЯ ДЛЯ КОРРЕКТОНГО ОТОБРАЖЕНИЯ НА ЛЮБОЙ ШИРИНЕ ЛЮБОГО ДЕВАЙСА (не надо самому все прописывать!!!)
  использование: import {HeaderButtons, Item} from "react-navigation-header-buttons", import { AppHeaderIcon } from '../components/ui/AppHeaderIcon'
  useLayoutEffect(() => {
    navigation.setOptions({
      headerRight: () => {
        return ( // можно возвращаться не 1 а 2 3 и тд айтема, сколько хочешь
          <HeaderButtons HeaderButtonComponent={AppHeaderIcon}>
            <Item title="Take Photo" iconName="ios-camera" onPress={() => alert("pressed")} />
          </HeaderButtons>
        )}
      headerLeft: () => { // из MainScreen
        return (
          <HeaderButtons HeaderButtonComponent={AppHeaderIcon}>
            <Item
              title="Toggle Drawer"
              iconName="ios-menu"
              onPress={() => {
                navigation.toggleDrawer()
              }}
            />
          </HeaderButtons>
        )
      },  
    })
  }, [])
  где AppHeaderIcon:
  **********
  import React from 'react'
  import { HeaderButton } from "react-navigation-header-buttons"
  import { Platform } from "react-native"
  import { THEME } from '../../theme'
  import {Ionicons} from "@expo/vector-icons"

  export const AppHeaderIcon = props => <HeaderButton 
    {...props} // если вдруг что передали
    iconSize={24}
    IconComponent={Ionicons}
    color={Platform.OS === "android" ? "white" : THEME.MAIN_COLOR}
  />
  ************ // отступление // без react-navigation-header-buttons - будет смотется кривовато и надо будет прописывать стили и еще мб адаптацию под разные платформы
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++  
                                    
///////////////////////////////////////////////////////////////////////////////////////
НАСТРОЙКА НИЖНЕЙ НАВИГАЦИИ:
npm install @react-navigation/bottom-tabs
import { createBottomTabNavigator } from '@react-navigation/bottom-tabs';
import { createMaterialBottomTabNavigator } from '@react-navigation/material-bottom-tabs';
import { MaterialCommunityIcons } from '@expo/vector-icons'

const Tab = Platform.OS === "android" ? createMaterialBottomTabNavigator() : createBottomTabNavigator()



const BottomTabNavigator = () => {
  return (
  <NavigationContainer>
      <Tab.Navigator screenOptions={({ route }) => ({
        // Для андроида // айфону не противоречат
        activeColor={"white"}
        inActiveColor="#3e2465"
        barStyle={{ backgroundColor: THEME.MAIN_COLOR }}
        shifting={true}
        //labeled={false} // без текста
        tabBarIcon: ({ focused, size = 25, color }) => {
            // size = 25 по стандарту / focesed - динамически сам считается / color - цвет текста текущий/меняется через tabBarOptions
            // принимаем как парметр по умолчванию чтобы андроид понимал
            let iconName;

            if (route.name === 'Post') {
              iconName = focused
                ? 'image'
                : "image-outline";
            } else if (route.name === 'Booked') {
              iconName = focused ? 'star' : 'star-outline';
            }

            // You can return any component that you like here!
            return <MaterialCommunityIcons name={iconName} size={size} color={color} />;
          },
      })} tabBarOptions={{ // tabBarOptions - настройки для айфона, для андройда выше
        activeTintColor: THEME.MAIN_COLOR,
        labelStyle: {
          fontSize: 12,
          marginBottom: 3
        },
        labelPosition:"beside-icon",
        showLabel: true, // для скрытия текста на айфоне
        style: {
          backgroundColor: "green" // или другой цвет задать
        }
      }} >  
      <Tab.Screen name="Post" component={PostNavigator} options={{tabBarLabel:"Все посты"}} /> // postNavigator - это стэк навигатор который выше(как AppNavigation) но без NavigationContainer, т к он должен
      // быть оберткой максимальной типа 
      <Tab.Screen name="Booked" component={BookedNavigator} options={{tabBarLabel:"Избранное"}} /> // это тоже стэк, но не обзяательно перадть стэк, можно обычный скрин (страницу)
    </Tab.Navigator>
  </NavigationContainer>
  )
}

export const AppNavigation = () => {
  return <BottomTabNavigator />
}
OPTIONS ДЛЯ TAB SCREEN'а
options={{key:value}}
tabBarBadge:3 // значок типа количесво уведомлекний
tabBarIcon: ({ color, size }) => (
  <MaterialCommunityIcons name="home" color={color} size={size} />
),
tabBarLabel:"Все посты"
tabBarVisible: true/false // показывать скрывать панель с нижнец навигацией // ТОЛЬКО АЙОС
tabBarButton // тоже только айос / дейсвует при клике на любой таб
tabBarColor: "orange" и любой дркгой цвет // классно выглядит если везде разный задан цвет и shifting={true} стоит // ТОЛЬКО АНДРОИД

//СОБЫТИЯ
tabPress // передается в нижнии скрины или стэки (туда что вызывает компонент в таб скринах) и вызвается как navigation.addEventlistener("tabPress",() => {}) // ios android
tabLongPress // аналогично // IOS -
то что подразумеваю под айосом - @react-navigation/bottom-tabs
то что подразумеваю под андроидом - @react-navigation/material-bottom-tabs


///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////

НАСТРОЙКА ДРОВЕР НАВИГАЦИИ
npm install @react-navigation/drawer
const Drawer = createDrawerNavigator();
//  КАК ВЫГЛЯДИТЬ У МЕНЯ (НИЖЕ СЕТТИНГСЫ)
#####################################################################

const MainNavigator = () => {
  return (
    <Drawer.Navigator
      drawerType={"back"} // есть slide,front,permanent , permanent - самый худший
      screenOptions={({ route }) => ({
        
        drawerIcon: ({ focused, size = 25, color }) => {
          // size = 25 по стандарту / focesed - динамично / color - цвет текста текущий/меняется через tabBarOptions
          let iconName;
          switch (route.name) {
            case "Main":
              iconName = focused ? 'checkbox-multiple-marked-circle' : "checkbox-multiple-blank-circle-outline";
              break;
            case "Create":
              iconName = focused ? 'plus-circle' : "plus-circle-outline";
              break;
            case "About":
              iconName = focused ? 'information' : "information-outline";
              break;
            default:
              iconName = focused ? "checkbox-multiple-blank-circle" : "checkbox-multiple-blank-circle-outline"
          }
          // You can return any component that you like here!
          return <MaterialCommunityIcons name={iconName} size={size} color={color} />;
        }
      })}
      drawerContentOptions={{
        activeTintColor: Platform.OS === "android" ? "white" : THEME.MAIN_COLOR, // настройка под айос и андроид
        activeBackgroundColor: Platform.OS === "android" ? THEME.MAIN_COLOR : "white"
      }}
    >
      <Drawer.Screen name="Main" component={BottomTabNavigator} options={{drawerLabel: "Основной"  }}/>
      <Drawer.Screen name="About" component={AboutNavigator} options={{ drawerLabel: "О нас"}} /> // надо передавать не скрин а навигатор созданный через таб и стэк,чтобы была доступна навигация
      // покажлу только на примере эбаут, крейт также (НИЖЕ под ЭКСПОРТОМ ABOUTNAVIGATOR)
      <Drawer.Screen name="Create" component={CreateScreen} options={{ drawerLabel: "Создать пост"}} />
    </Drawer.Navigator>
  )
}

export const AppNavigation = () => {
  return (
    <NavigationContainer>
      <MainNavigator />
    </NavigationContainer>
  )
}

//ABOUT NAVIGATOR
const AboutNavigator= () => {
  return (
    <Stack.Navigator screenOptions={navigatorOptions()}  headerMode={"float"} mode={"modal"}>
      <Stack.Screen name="About" component={AboutScreen} options={{title: "О приложении" }} />
    </Stack.Navigator> 
    // setOptions в AboutScreen задает иконку меню слева(нужна для дровера)
  )
}
// setOptions, касающийся левой иконки ,в том числе событий при клике, такой же как в MainScreen (который где-то здесь есть)

#####################################################################

//  OPTIONS (для скрина) <=> SCREEN OPTIONS (ДЛЯ NAVIGATOR)
drawerLabel - текст(функция принимающая цвет и фокусед (можно создать как обьект и выводить текст если не принимать аргументов))
drawerIcon - иконка (функция принимающая color size focused) лучше из навигатора
swipeEnabled - стандартно true // разрешить свайпы для открытия закрыттия дровера
gestureEnabled - жесты чтобы открыть/закрыть дровер
unmountOnBlur - изначально false // не рекомендуется делать тру, так как польщователи мошут потерчять историю

// drawerContentOptions
activeTintColor: Platform.OS === "android" ? "white" : THEME.MAIN_COLOR, // цвет текста активного
inactiveTintColor // цвет текста неактивного
activeBackgroundColor: Platform.OS === "android" ? THEME.MAIN_COLOR : "white" // цвет бэкграунда активного
inactiveBackgroundColor // бг неактивный
itemStyle стиль для айтема// itemStyle: { marginVertical: 30 }
labelStyle // fontSize // fontWeight // fontFamily
style  стиля для  оболочки
contentContainerStyle Объект стиля для раздела содержимого внутри ScrollView


EVENTS //
drawerOpen и drawerClose // они сами автоматически действуют соответсвенно про открытие и закрытие дровера
React.useEffect(() => {
  const unsubscribe = navigation.addListener('drawerOpen', (e) => {
    // Do something
  });

  return unsubscribe;
}, [navigation]);
// ВЫЗВАТЬ ЭТИ СОБЫТИЯ
что-то onPress={() => navigation.openDrawer()}
Все такие методы navigation.openDrawer(), navigation.closeDrawer(),navigation.toggleDrawer()


///////////////////////////////////////////////////////////////////////////////////////

//NAVIGATION МЕТОДЫ
// переход по страничкам навигации
// NAVIGATE
export const MainScreen = ({navigation}) => {
  const goToPost = () => {
    navigation.navigate("Post" ) // переход на страничку с name=Post // если место navigate будет push => то же самое, но при переходе на эту же страницу (с которой был клик)
                                  // navigate ничего не сделает, а push перейедт на нее как новую с анимацией, и также будет кнопка назад которая будет вовразаться на нее же
                                  // по сути одно и тоже, но такая деталь
  } или
  navigation.navigate("Post", {postId: post.id} ) // передаем пост ай ди, и по нему на страничке пост определим что за пост и относительно этого сформируем данные на страницу
  // получаем этот ай ди 
  //export const PostScreen = ({navigation,route}) => {
  //  const postId = route.params["postId"]
  // DATA - массив типа базы данных который содержит нужную инфу , и в замисти от него и от ай ди мы можем найти любой айтем
 // const post = DATA.find(elem => elem.id === postId)

  
  return (
    <View style={styles.wrapper}>
      <AppTextBold style={styles.text}>MainScreen</AppTextBold>
      <AppText style={styles.text}>MainScreen regular</AppText>
      <Button title="go to post" onPress={goToPost} />
    </View>
  )
}

//goBack
export const PostScreen = ({navigation}) => {
  const toBack = () => {
    navigation.goBack() // переход на предыдущую страницу (обратно по стэку)
  }
  return (
    <View style={styles.wrapper}>
      <AppText>PostScreen</AppText>
      <Button title="Обратно" onPress={toBack} />
    </View>
  )
}


-----------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------
НЕ КАСАЕТСЯ ОСНОВНОГО, ПРОСТОЧ ТОБЫ ПОНИМАТЬ , 
ТАК ВЫГЛЯДИТ BookedNavigator
-------
const BookedNavigator = () => {
  return (
  <Stack.Navigator
    initialRouteName="Booked"
    screenOptions={{
      headerTintColor: Platform.OS === "android" ? "#fff" : THEME.MAIN_COLOR,
      headerStyle: styles.headerStyle,
    }}
    headerMode="float"
  >
    <Stack.Screen name="Booked" component={BookedScreen} />
    <Stack.Screen name="Post" component={PostScreen} />
  </Stack.Navigator>
  )
}

Post navigator
------
const PostNavigator = () => {
  return (

  <Stack.Navigator
    initialRouteName="Main"
    screenOptions={{
      headerTintColor: Platform.OS === "android" ? "#fff" : THEME.MAIN_COLOR,
      headerStyle: styles.headerStyle,
    }}
    headerMode="float"
  >
    <Stack.Screen name="Main" component={MainScreen} options={{ title: "Мой блог"}}/>
    <Stack.Screen name="Post" component={PostScreen} />
  </Stack.Navigator>
  )
}









