import React, {useReducer} from 'react';
import axios from "axios"
import {GithubContext} from "./githubContext"
import {GithubReducer} from "./githubReducer"
import {SEARCH_USERS,GET_REPOS,GET_USER,CLEAR_USERS, SET_LOADING} from "../types"

const CLIENT_ID = process.env.REACT_APP_CLIENT_ID
const CLIENT_SECRET = process.env.REACT_APP_CLIENT_SECRET

const withCreds = (url) => {
  return `${url}client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}`
}

export const GithubState = ({children}) => {
  const initialState = {
    user: {},
    users: [],
    loading: false,
    repos: []
  }
  
  const [state, dispatch] = useReducer(GithubReducer, initialState)
  
  const setLoading = () => {
    dispatch({
      type: SET_LOADING,
    })
  }

  const search = async (value) => {
    // setLoading так как запрос к серверу на время которого нкжно показывать спиннер
    setLoading()

    const response = await axios.get(
      withCreds(`https://api.github.com/search/users?q=${value}&`)
    )

    // в поле items - вся информация, поля "total_count",
    //"incomplete_results" не нужны
    dispatch({
      type: SEARCH_USERS,
      payload: response.data.items
    })
  }
  const getUser = async (name) => {
    setLoading()
    const response = await axios.get(
      withCreds(`https://api.github.com/users/${name}?`)
    )

    dispatch({
      type: GET_USER,
      payload: response.data
    })
  }
  const getRepos = async (name) => {
    setLoading()
    const response = await axios.get(
      withCreds(`https://api.github.com/users/${name}/repos?per_page=5&`)
    )
    dispatch({
      type: GET_REPOS,
      payload: response.data
    })
  }
  const clearUsers = () => {
    dispatch({
      type: CLEAR_USERS,
    })
  }

  const {user, users, repos, loading} = state

  return (
    <GithubContext.Provider value={{
      clearUsers,setLoading,getUser,getRepos,search,
      user, users, repos, loading

    }}>
      {children}
    </GithubContext.Provider>
  )
}
